{
    api: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiApi](source : URI, nilOnError : BOOL)",
    appendpath: "function [String MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiAppendPath](path : STR, title : ANY)",
    cdn: "function [String MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetCdn](path : STR)",
    comments: "function [List MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiComments](path : STR, recurse : BOOL, user : ANY, max : NUM, offset : NUM)",
    contributors: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiContributors](path : ANY, max : NUM, recent : BOOL, exclude : STR)",
    create: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiCreate](label : STR, path : STR, template : STR, button : BOOL, title : STR, args : MAP)",
    directory: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiDirectory](query : STR)",
    docblock: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiDocBlock](feature : STR, hidden : BOOL)",
    docblocks: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiDocBlocks](features : LIST, hidden : BOOL)",
    edit: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiEdit](label : STR, path : STR, section : STR, button : BOOL, template : STR, args : MAP)",
    getdraftrevision: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.DraftRevisionFunction](page : ANY, revision : ANY, redirect : BOOL)",
    getfile: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetFile](fileid : NUM)",
    getfilesforpages: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetFilesForPages](fileName : STR, pageList : LIST)",
    getguidepages: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetGuidePages](path : ANY)",
    getidfpages: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiIdfPages](path : ANY)",
    getpage: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetPage](page : ANY, redirect : BOOL)",
    getpageinfo: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetPageInfo](page : ANY, redirect : BOOL)",
    getpageinfos: "function [List MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetPageInfos](pages : LIST, redirect : BOOL)",
    getpageinfosbytags: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetPageInfosByTags](page : ANY, recursive : BOOL)",
    getpagerevision: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.RevisionFunction](page : ANY, revision : ANY, redirect : BOOL)",
    getpagesbyarticletype: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetPagesByArticleType](page : ANY, tag : STR)",
    getpagesbytags: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetPagesByTags](page : ANY, recursive : BOOL)",
    getpagestrendstats: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetPagesTrendStats](page : ANY, limit : NUM, recursive : BOOL)",
    getpageswithtag: "function [List MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetPagesWithTag](page : ANY, tagname : STR)",
    getpropertyforpages: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetPropertyForPages](propertyName : STR, pageList : LIST)",
    getquery: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetQuery](query : STR, limit : STR, sortby : STR, constraint : STR, offset : NUM, summaryPath : STR, recommended : BOOL, notrack : BOOL, queryid : NUM, previousqueryid : NUM)",
    getrelatedpages: "function [List MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetRelatedPages](page : ANY, limit : NUM)",
    getsearch: "function [List MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetSearch](query : STR, max : NUM, sortBy : STR, constraint : STR, offset : NUM)",
    getsitestats: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.GetSiteStatistics]()",
    gettag: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGeTag](tag : STR)",
    gettagscount: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetTagsCount](page : ANY)",
    gettopichierarchy: "function [List MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetTopicHierarchy](page : ANY)",
    getuser: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetUser](user : ANY)",
    idfTemplate: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiIdfTemplate](args : ANY)",
    inclusions: "function [List MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiInclusions](templates : BOOL)",
    jsmodule: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetJavaScriptModuleHtml](path : STR)",
    language: "function [String MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiLanguage](path : STR)",
    learningpath: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetLearningPaths](name : STR, alwaysReturn : BOOL)",
    learningpathcategories: "function [List MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiGetLearningPathCategories]()",
    link: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiLink](page : ANY, text : ANY, title : STR, target : STR, redirect : BOOL)",
    localize: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiLocalize](resourceName : STR, resourceParameters : LIST)",
    overview: "function [String MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiOverview](path : ANY)",
    page: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiPage](path : STR, section : STR, revision : NUM, show : BOOL, heading : NUM, nilIfMissing : BOOL)",
    pagecount: "function [Int32 MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiPageCount]()",
    pageexists: "function [Boolean MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiPageExists](path : ANY)",
    pagepermissions: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiPagePermissions](page : ANY, user : ANY)",
    popular: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiPopular](max : NUM)",
    recentchangestimestamp: "function [String MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiTimestamp](path : ANY)",
    report: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.LookerReport](externalReportId : NUM)",
    search: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiSearch](query : STR, max : NUM, sortBy : STR, constraint : STR, offset : NUM)",
    signuri: "function [XUri MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiSignUri](uri : URI)",
    template: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiTemplate](path : STR, args : ANY, target : STR, conflict : STR)",
    text: "function [String MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiText](path : STR, section : STR, revision : NUM, nilIfMissing : BOOL)",
    toc: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiToc](path : ANY, depth : NUM)",
    tree: "function [XDoc MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiTree](path : ANY, depth : NUM, reverse : BOOL)",
    uri: "function [String MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiUri](path : STR, query : STR)",
    usercount: "function [Int32 MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiUserCount]()",
    userhaspermissions: "function [Boolean MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiUserHasPermissions](permissions : STR)",
    version: "property get [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiVersion]()"
}

pagepermissions: "function [Map MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiPagePermissions](page : ANY, user : ANY)",
userhaspermissions: "function [Boolean MindTouch.Deki.Logic.ExtensionProcessorQueryProvider.WikiUserHasPermissions](permissions : STR)",